import argparse
import yaml
import requests

# ---------------------------------
# Define the command line parameters
# ---------------------------------
parser = argparse.ArgumentParser(prog='ga_uploadCase.py', description='Uploads a case to Geneyx Analysis')

# case data
parser.add_argument('--caseId', help = 'The case serial number. In case the SN is not provided it shall be automatically generated by server.')
parser.add_argument('--caseName', help = 'The case name. In case empty, it shall be assigned as the protocol name.')
parser.add_argument('--caseDescription', help = 'The case clinical description.')
parser.add_argument('--phenAlleleFreq', help = 'Phenotype allele frequency. In case empty the value is taken from the protocol.')
parser.add_argument('--casePhenotypes', help = 'The phenotypes to use.')
parser.add_argument('--caseOwner', help = 'The case doctor owner.')
parser.add_argument('--caseOwnerDepartment', help = 'The case doctor department.')
parser.add_argument('--geneList', help = 'A gene list to assocaite with the case.')
parser.add_argument('--protocolId', help = 'The protocol ID to create the case from.', required=True)

# subject data
parser.add_argument('--subjectId', help = 'An existing subject ID.', required=True)

# samples data
parser.add_argument('--probandSampleId', help = 'Same as the name given to the VCF file (SampleSerialNumber, sampleId)', required=True)
parser.add_argument('--associatedSamples', help = 'Each array entry shall have: Relation-sample relation, SampleId-sample Id, Affected- affect indication.')

# commands (optional)
parser.add_argument('--config','-c', help = 'configuration file', default='ga.config.yml')

# ---------------------------------
# Helper functions
# ---------------------------------
def _loadYamlFile(file):
    with open(file, 'r') as stream:
        try:
            obj = yaml.load(stream)
            return obj
        except yaml.YAMLError as exc:
            print(exc)


args = parser.parse_args()
#read the config file
config = _loadYamlFile(args.config)

print(config)

#prepare the data to send
data = {
    'ApiUserKey': config['apiUserKey'],
    'ApiUserID': config['apiUserId'],
        
    'SerialNumber': args.caseId,
    'Name': args.caseName,
    'Description': args.caseDescription,
    'PhenAlleleFreq': args.phenAlleleFreq,
    'Phenotypes': args.casePhenotypes,
    'Owner': args.caseOwner,
    'OwnerDepartment': args.caseOwnerDepartment,
    'GeneList': args.geneList,
    'ProtocolId': args.protocolId,
    'SubjectId': args.subjectId,
    'ProbandSampleId': args.probandSampleId,
    'AssociatedSamples': args.associatedSamples
}

api = config['server']+'/api/CreateCase'
print('Creating case')
r = requests.post(api, data = data)
print(r)
print(r.content)